package main

import (
	"github.com/opensourceways/server-common-lib/utils"

	"github.com/opensourceways/cve-manager/common/infrastructure/postgres"
	"github.com/opensourceways/cve-manager/cve/infrastructure/repositoryimpl"
)

func loadConfig(path string) (*Config, error) {
	cfg := new(Config)
	if err := utils.LoadFromYaml(path, cfg); err != nil {
		return nil, err
	}

	cfg.SetDefault()
	if err := cfg.Validate(); err != nil {
		return nil, err
	}

	return cfg, nil
}

type configValidate interface {
	Validate() error
}

type configSetDefault interface {
	SetDefault()
}

type postgresConfig struct {
	DB postgres.Config `json:"db"    required:"true"`

	repositoryimpl.Config
}

type Config struct {
	Task     taskConfig     `json:"task"        required:"true"`
	Postgres postgresConfig `json:"postgres"    required:"true"`
}

type taskConfig struct {
	Pkg pkg `json:"pkg"   required:"true"`
}

type pkg struct {
	Exec        string            `json:"exec"         required:"true"`
	Base        []communityConfig `json:"base"         required:"true"`
	Application []communityConfig `json:"application"  required:"true"`
}

type communityConfig struct {
	Org          string   `json:"org"             required:"true"`
	Platform     string   `json:"platform"        required:"true"`
	Community    string   `json:"community"       required:"true"`
	DefaultRepo  string   `json:"repo"`
	DownloadFile string   `json:"download_file"`
	Url          []string `json:"url"`
}

func (cfg *Config) configItems() []interface{} {
	return []interface{}{
		&cfg.Postgres.DB,
		&cfg.Postgres.Table,
		&cfg.Task,
	}
}

func (cfg *Config) SetDefault() {
	items := cfg.configItems()
	for _, i := range items {
		if f, ok := i.(configSetDefault); ok {
			f.SetDefault()
		}
	}
}

func (cfg *Config) Validate() error {
	if _, err := utils.BuildRequestBody(cfg, ""); err != nil {
		return err
	}

	items := cfg.configItems()
	for _, i := range items {
		if f, ok := i.(configValidate); ok {
			if err := f.Validate(); err != nil {
				return err
			}
		}
	}

	return nil
}
